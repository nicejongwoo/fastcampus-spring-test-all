### 재고 조회 실패
GET {{restUrl}}/api/v1/inventory/{{nonExistingItemId}}

> {%
    import { assertE2eErrorEquals } from './script/assertions'

    assertE2eErrorEquals(404, 1000, "자산이 존재하지 않습니다.");
 %}

### 재고 조회 성공
GET {{restUrl}}/api/v1/inventory/{{existingItemId}}

> {%
    import { assertE2eDataEquals } from './script/assertions'

    const existingItemId = request.environment.get("existingItemId");
    assertE2eDataEquals(existingItemId)

    client.global.set("oldStock", response.body.data.stock + ""); // 기존 재고를 전역 변수에 저장(문자열로 저장)
%}

### 재고 차감 실패
< {%
    const quantity = request.environment.get("veryLargeQuantity");
    request.variables.set("quantity", quantity);
%}
POST {{restUrl}}/api/v1/inventory/{{existingItemId}}/decrease
Content-Type: application/json

{
  "quantity": {{quantity}}
}

> {%
  import { assertE2eErrorEquals } from './script/assertions'

  assertE2eErrorEquals(400, 1001, "재고가 부족합니다.");
%}

### 재고 차감 성공
< {%
    const quantity = 30;  // 차감 할 수량
    const oldStock = parseInt(client.global.get("oldStock")); // 기존 재고 (재고 조회 성공 api에서 가져온다)

    if (isNaN(oldStock)) {
        throw new Error("Invalid oldStock"); // 기존 재고가 없거나 잘못된 경우
    }

    if (oldStock < quantity) {
        throw new Error("Insufficient stock"); // 기존 재고가가 차감할 수량보다 적을 경우
    }

    request.variables.set("quantity", quantity);
%}
POST {{restUrl}}/api/v1/inventory/{{existingItemId}}/decrease
Content-Type: application/json

{
  "quantity": {{quantity}}
}

> {%
    import { assertE2eDataEquals } from './script/assertions'

    const quantity = parseInt(request.variables.get("quantity")); // 요청시 들어온 수량
    const existingItemId = request.environment.get("existingItemId"); // 기존 아이템 ID
    const oldStock = parseInt(client.global.get("oldStock")); // 기존 재고 (재고 조회 성공 api에서 가져온다)

    assertE2eDataEquals(existingItemId, oldStock - quantity); // 재고 차감 성공시 재고가 차감된 값과 일치하는지 확인
%}

### 재고 수정 실패
@invalidStock = -1

PATCH {{restUrl}}/api/v1/inventory/{{existingItemId}}/stock
Content-Type: application/json

{
  "stock": {{invalidStock}}
}

> {%
    import { assertE2eErrorEquals } from './script/assertions'

    assertE2eErrorEquals(400, 1003, "재고가 유효하지 않습니다.");
%}

### 재고 수정 성공
< {%
    const newStock = "500"; // 수정할 재고
    request.variables.set("newStock", newStock);
%}

PATCH {{restUrl}}/api/v1/inventory/{{existingItemId}}/stock
Content-Type: application/json

{
  "stock": {{newStock}}
}

> {%
    import { assertE2eDataEquals } from './script/assertions'

    const existingItemId = request.environment.get("existingItemId"); // 기존 아이템 ID
    const expectedStock = parseInt(request.variables.get("newStock")); // 수정할 재고

    assertE2eDataEquals(existingItemId, expectedStock);
%}